import { useAuth } from "@/hooks/useAuth";
import { useState, useEffect } from "react";
import { collection, query, where, orderBy, getDocs, deleteDoc, doc, onSnapshot, getDoc, updateDoc, setDoc } from "firebase/firestore";
import type { Listing, AdoptionRequest } from "@shared/schema";
import { db } from "@/lib/firebase";
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { useLocation } from "wouter";

export default function Profile() {
  const { user, userData } = useAuth();
  const [listings, setListings] = useState<Listing[]>([]);
  const [adoptionRequests, setAdoptionRequests] = useState<(AdoptionRequest & { listingName?: string; adopterName?: string })[]>([]);
  const [sentRequests, setSentRequests] = useState<(AdoptionRequest & { listingName?: string; ownerName?: string })[]>([]);
  const [, setLocation] = useLocation();

  useEffect(() => {
    if (!user) return;

    const q = query(
      collection(db, "listings"),
      where("userId", "==", user.uid),
      orderBy("createdAt", "desc")
    );

    return onSnapshot(q, (snapshot) => {
      setListings(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Listing[]);
    });
  }, [user]);

  useEffect(() => {
    if (!user) return;

    const q = query(
      collection(db, "adoptionRequests"),
      where("ownerId", "==", user.uid),
      orderBy("createdAt", "desc")
    );

    return onSnapshot(q, async (snapshot) => {
      const requestsData = await Promise.all(snapshot.docs.map(async (docSnap) => {
        const request = docSnap.data() as AdoptionRequest;
        const listingSnap = await getDoc(doc(db, "listings", request.listingId));
        const userSnap = await getDoc(doc(db, "users", request.userId));
        return { 
          ...request, 
          id: docSnap.id, 
          listingName: listingSnap.exists() ? listingSnap.data().title : "(Няма име)",
          adopterName: userSnap.exists() ? userSnap.data().username : "(Няма име)" 
        };
      }));
      setAdoptionRequests(requestsData);
    });
  }, [user]);

  useEffect(() => {
    if (!user) return;

    const q = query(
      collection(db, "adoptionRequests"),
      where("userId", "==", user.uid),
      orderBy("createdAt", "desc")
    );

    return onSnapshot(q, async (snapshot) => {
      const sentRequestsData = await Promise.all(snapshot.docs.map(async (docSnap) => {
        const request = docSnap.data() as AdoptionRequest;
        const listingSnap = await getDoc(doc(db, "listings", request.listingId));
        const ownerSnap = await getDoc(doc(db, "users", request.ownerId));
        return { 
          ...request, 
          id: docSnap.id, 
          listingName: listingSnap.exists() ? listingSnap.data().title : "(Няма име)",
          ownerName: ownerSnap.exists() ? ownerSnap.data().username : "(Няма име)" 
        };
      }));
      setSentRequests(sentRequestsData);
    });
  }, [user]);

  return (
    <div className="space-y-6 p-6 max-w-5xl mx-auto">
      <Tabs defaultValue="listings">
        <TabsList className="bg-gray-100 p-2 rounded-lg">
          <TabsTrigger value="listings">Моите обяви</TabsTrigger>
          <TabsTrigger value="requests">Заявки за осиновяване</TabsTrigger>
          <TabsTrigger value="sentRequests">Изпратени заявки</TabsTrigger>
        </TabsList>

        <TabsContent value="listings">
          {listings.length > 0 ? listings.map(listing => (
            <Card key={listing.id} className="p-4 shadow-md rounded-lg">
              <CardTitle>{listing.title}</CardTitle>
              <p>{listing.description}</p>
            </Card>
          )) : <p className="text-center text-gray-500">Нямате обяви</p>}
        </TabsContent>

        <TabsContent value="requests">
          {adoptionRequests.length > 0 ? adoptionRequests.map(request => (
            <Card key={request.id} className="p-4 shadow-md rounded-lg">
              <p><strong>Обява:</strong> {request.listingName}</p>
              <p><strong>Заявител:</strong> {request.adopterName}</p>
              <p><strong>Статус:</strong> {request.status}</p>
              {request.status === "pending" && (
                <Button 
                  onClick={async () => {
                    await updateDoc(doc(db, "adoptionRequests", request.id), { status: "approved" });
                  }}
                  size="sm"
                  className="mt-2"
                >
                  Одобри
                </Button>
              )}
              {request.status === "approved" && (
                <Button onClick={() => setLocation(`/chat/${request.ownerId}_${request.userId}`)} size="sm" className="mt-2">
                  Отвори чат
                </Button>
              )}
            </Card>
          )) : <p className="text-center text-gray-500">Няма заявки за осиновяване</p>}
        </TabsContent>

        <TabsContent value="sentRequests">
          {sentRequests.length > 0 ? sentRequests.map(request => (
            <Card key={request.id} className="p-4 shadow-md rounded-lg">
              <p><strong>Изпратено до:</strong> {request.ownerName}</p>
              <p><strong>Обява:</strong> {request.listingName}</p>
              <p><strong>Статус:</strong> {request.status}</p>
              {request.status === "approved" && (
                <Button onClick={() => setLocation(`/chat/${request.ownerId}_${request.userId}`)} size="sm" className="mt-2">
                  Отвори чат
                </Button>
              )}
            </Card>
          )) : <p className="text-center text-gray-500">Нямате изпратени заявки</p>}
        </TabsContent>
      </Tabs>
    </div>
  );
}
