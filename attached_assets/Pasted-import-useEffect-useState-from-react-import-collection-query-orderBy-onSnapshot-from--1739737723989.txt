import { useEffect, useState } from "react";
import { collection, query, orderBy, onSnapshot } from "firebase/firestore";
import { db } from "@/lib/firebase";
import type { Listing } from "@shared/schema";
import { ListingCard } from "@/components/ListingCard";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";

export default function Listings() {
  const [listings, setListings] = useState<Listing[]>([]);
  const [animalType, setAnimalType] = useState<string>("all");
  const [ageRange, setAgeRange] = useState<string>("all");
  const [location, setLocation] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 9;

  useEffect(() => {
    const listingsRef = collection(db, "listings");
    const archivedRef = collection(db, "archived");
    const q = query(listingsRef, orderBy("createdAt", "desc"));
    const archivedQ = query(archivedRef, orderBy("createdAt", "desc"));

    const unsubscribeListings = onSnapshot(q, (snapshot) => {
      const listingsData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Listing[];
      setListings(listingsData);
      setLoading(false);
    });

    const unsubscribeArchived = onSnapshot(archivedQ, (snapshot) => {
      const archivedData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Listing[];
      setListings(listingsData.concat(archivedData));
      setLoading(false);
    });

    return () => {
      unsubscribeListings();
      unsubscribeArchived();
    };
  }, []);

  const filteredListings = listings.filter((listing) => {
    const matchesType = animalType === "all" ? true : listing.type === animalType;
    const matchesLocation = !location ? true : listing.location?.toLowerCase().includes(location.toLowerCase());

    let matchesAge = true;
    if (ageRange !== "all") {
      const totalMonths = (listing.ageYears * 12) + listing.ageMonths;
      switch (ageRange) {
        case "baby": // 0-6 –º–µ—Å–µ—Ü–∞
          matchesAge = totalMonths <= 6;
          break;
        case "young": // 6 –º–µ—Å–µ—Ü–∞ - 2 –≥–æ–¥–∏–Ω–∏
          matchesAge = totalMonths > 6 && totalMonths <= 24;
          break;
        case "adult": // 2-8 –≥–æ–¥–∏–Ω–∏
          matchesAge = totalMonths > 24 && totalMonths <= 96;
          break;
        case "senior": // –Ω–∞–¥ 8 –≥–æ–¥–∏–Ω–∏
          matchesAge = totalMonths > 96;
          break;
      }
    }

    return matchesType && matchesLocation && matchesAge;
  });

  const totalPages = Math.ceil(filteredListings.length / itemsPerPage);
  const paginatedListings = filteredListings.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="max-w-6xl mx-auto px-4 py-8 space-y-6">
      {/* –§–∏–ª—Ç—ä—Ä –∏ –∑–∞–≥–ª–∞–≤–∏–µ */}
      <div className="space-y-4">
        <h1 className="text-3xl font-bold text-gray-800">üè° –ù–∞–º–µ—Ä–∏ —Å–≤–æ—è –±—ä–¥–µ—â –ª—é–±–∏–º–µ—Ü</h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Select value={animalType} onValueChange={setAnimalType}>
            <SelectTrigger className="w-full bg-white border border-gray-300 shadow-md rounded-lg">
              <SelectValue placeholder="–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">–í—Å–∏—á–∫–∏</SelectItem>
              <SelectItem value="dog">üê∂ –ö—É—á–µ—Ç–∞</SelectItem>
              <SelectItem value="cat">üê± –ö–æ—Ç–∫–∏</SelectItem>
              <SelectItem value="other">üêæ –î—Ä—É–≥–∏</SelectItem>
            </SelectContent>
          </Select>

          <Select value={ageRange} onValueChange={setAgeRange}>
            <SelectTrigger className="w-full bg-white border border-gray-300 shadow-md rounded-lg">
              <SelectValue placeholder="–í—ä–∑—Ä–∞—Å—Ç" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">–í—Å–∏—á–∫–∏ –≤—ä–∑—Ä–∞—Å—Ç–∏</SelectItem>
              <SelectItem value="baby">–ë–µ–±–µ—Ç–∞ (0-6 –º–µ—Å–µ—Ü–∞)</SelectItem>
              <SelectItem value="young">–ú–ª–∞–¥–∏ (6–º-2–≥)</SelectItem>
              <SelectItem value="adult">–í—ä–∑—Ä–∞—Å—Ç–Ω–∏ (2-8–≥)</SelectItem>
              <SelectItem value="senior">–°—Ç–∞—Ä—à–∏ (8+–≥)</SelectItem>
            </SelectContent>
          </Select>

          <div className="relative">
            <input
              type="text"
              placeholder="–¢—ä—Ä—Å–µ–Ω–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è..."
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              className="w-full h-10 px-3 bg-white border border-gray-300 shadow-md rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>
      </div>

      {/* –û–±—è–≤–∏ */}
      {loading ? (
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {[...Array(6)].map((_, i) => (
            <Skeleton key={i} className="h-[300px] bg-gray-200 rounded-2xl" />
          ))}
        </div>
      ) : (
        <>
          {filteredListings.length > 0 ? (
            <div className="space-y-6">
              <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {paginatedListings.map((listing) => (
                  <ListingCard key={listing.id} listing={listing} />
                ))}
              </div>

              {totalPages > 1 && (
                <div className="flex justify-center mt-8">
                  <nav className="flex items-center gap-2">
                    <button
                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                      disabled={currentPage === 1}
                      className="px-3 py-1 rounded-md bg-gray-100 disabled:opacity-50"
                    >
                      –ü—Ä–µ–¥–∏—à–Ω–∞
                    </button>
                    <span className="px-4 py-1">
                      –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –æ—Ç {totalPages}
                    </span>
                    <button
                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                      disabled={currentPage === totalPages}
                      className="px-3 py-1 rounded-md bg-gray-100 disabled:opacity-50"
                    >
                      –°–ª–µ–¥–≤–∞—â–∞
                    </button>
                  </nav>
                </div>
              )}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-16">
              <p className="text-lg text-gray-500">–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –æ–±—è–≤–∏ üôÅ</p>
            </div>
          )}
        </>
      )}
    </div>
  );
}