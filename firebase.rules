rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /chats/{chatId} {
      allow read: if request.auth != null && (
        resource.data.participants[0] == request.auth.uid || 
        resource.data.participants[1] == request.auth.uid
      );
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.participants[0] == request.auth.uid || 
        resource.data.participants[1] == request.auth.uid
      );

      match /messages/{messageId} {
        allow read: if request.auth != null && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants[0] == request.auth.uid || 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants[1] == request.auth.uid
        );
        allow create: if request.auth != null && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants[0] == request.auth.uid || 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants[1] == request.auth.uid
        );
        allow update: if request.auth != null && (
          resource.data.senderId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
        );
      }

      match /typing/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && userId == request.auth.uid;
      }
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
  }
}